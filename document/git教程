git 中一些选项解释：
-d  --delete：删除
-D  --delete --force的快捷键
-f  --force：强制
-m  --move：移动或重命名
-M  --move --force的快捷键
-r  --remote：远程
-a  --all：所有
一、git push
git push <远程主机名>   <本地分支名>:<远程分支名>。 将本地代码同步到远程仓库
git push origin --tags’，一次性推送全部尚未推送到远程的本地标签：
（如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支）
（ 如果省略远程分支名，则表示将本地分支推送到与之存在Tracking的远程分支）
二、git pull
取回远程主机某个分支的更新，再与本地的指定分支合并
git pull <远程主机名> <远程分支名>:<本地分支名>
一句话总结git pull和git fetch的区别：git pull = git fetch + git merge
git pull origin master  将远程origin主机的master分支拉取过来和本地的当前分支进行合并。
git fetch origin master   将远程版本库上的代码同步到本地，不过同步下来的代码并不会 合并到任何分支上去，它存放在到一个 origin/master 分支上,之后再调用git merge 命令将 origin/master 分支上的修改合并到主分支上
三、git commit
git commit -m “修改说明” 文件名
git commit -a -m “massage”  加的-a参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库
git commit --amend 重新提交，会将上次提交的覆盖掉
四、git add
git add .  # 将所有修改添加到暂存区
git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区
git add <path> 通常是通过git add <path>的形式把<path>添加到索引库中，<path>可以是文件也可以是目录。
git add -u [<path>]: 把<path>中所有跟踪文件中被修改过或已删除文件的信息添加到索引库。它不会处理那些不被跟踪的文件。省略<path>表示 . ,即当前目录
git add -i [<path>]命令查看中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看<path>中所有未跟踪的文件，同时进入一个子命令系统。
git不仅能判断出<path>中，修改(不包括已删除)的文件，还能判断出新添的文件，并把它们的信息添加到索引库中。
五、git branch
git branch不带参数：列出本地已经存在的分支，并且在当前分支的前面用"*"标记
git branch -r  查看远程版本库分支列表
git branch -a   查看所有分支列表，包括本地和远程
git branch dev  创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支
git branch --set-upstream-to=origin/remote_branch  your_branch，其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支
git branch -d dev 删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，此时可以使用 。
git branch -D dev：强制删除dev分支，
git branch -vv 可以查看本地分支对应的远程分支
git branch -m oldName newName  给分支重命名
git branch --contains CommitID  #查看提交的id所属的所有分支 
git branch -r --contains CommitID  #查看提交的id所属的远程所有分支 
git branch -a --contains CommitID #查看提交的id所属的本地和远程的所有分支 
git merge <name> 合并某分支到当前分支
六、git checkout
git checkout master 将分支切换到master
git checkout file_name 取出暂存区的同名文件覆盖当前文件（放弃对当前文件的修改）（如果文件名和分支名重复，则在文件名前加上--）
git checkout commit_id file_name  取文件file_name的在commit_id是的版本，如果省略了file_name，HEAD会指向具体的commit值，进入“头指针分离”状态，需要切换到某个分支再操作。
git checkout （不加参数），提示当前文件的修改
git checkout -b master 如果分支存在则只切换分支，若不存在则创建并切换到master分支（-b表示创建并切换）
git checkout -b branch-name origin/branch-name 建立本地分支和远程分支的关联
git checkout -b dev/1.5.4 origin/dev/1.5.4  从远程dev/1.5.4分支取得到本地分支/dev/1.5.4
git checkout brachname commtIDd 创建了一份新分支，包括提交commitID
git checkout -B branch 可以创建一个和当前分支同名的分支，且将以前的覆盖
git checkout -p <branch> 比较两个分支的差异内容
git checkout .      撤销对所有文件的修改
git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：（1）是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；（2）是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。
七、git remote
git remote show [shortname]  查看远程仓库信息
git remote add [shortname] [url] 添加远程仓库
git remote rename [old-name] [new-name] 重命名远程仓库
git remote rm [shortname] 删除远程仓库（解除与远程仓库的关系）
八、git reset
git reset HEAD 文件名   撤销对文件的修改（stage中的文件），即取消上次git add的内容
git reset HEAD  	撤销对所有文件的修改
git reset --hard HEAD^   #回退到上一个版本
git reset --hard HEAD^^  #回退到上上个版本
git reset --hard HEAD~10    #回退到之前10个版本
git reset --hard 5185793 #回退到版本号开头是5185793的版本
git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：在本地删除文件后，要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
git reset –soft	暂存区->工作区
git reset –mixed	版本库->暂存区
git reset –-hard HEAD	(版本回退)版本库->暂存区->工作区
九、git diff
如何查看三个分区的区别
git diff 查看工作区和暂存区的区别
git diff --cached 查看暂存区和版本库之间的区别
git diff HEAD 查看工作区和版本库之间的区别
git diff HEAD filepath 工作区与HEAD ( 当前工作分支) 比较
git diff branchName filepath ?当前分支的文件与branchName 分支的文件进行比较
git status 查看当前的工作状态
git diff commit-id commit-id  比较两个 commit -id 的差异(后一个相对于前一个的变化)
git diff HEAD^ HEAD 查看当前版本和上一版本的区别
十、git log
查看提交的分支
git log --oneline --decorate -1  日期显示：
git.log('--date=short','--pretty=format:%an %ad','-1')
git log --pretty=format:"%an,%cd,%h" --shortstat --since=2018-10-11
git log 版本管理
git reflog 这个指令记录了执行过的每一条指令
git log --pretty=oneline  每行一个版本
git log --graph命令可以看到分支合并图
git log -p filename 查看某个文件的修改记录
git show commidID filename 查看某次的提交
十一、git stash
git stash会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。实际应用中推荐给每个stash加一个message，用于记录版本，使用git stash save git stash save "test-cmd-stash" 取代git stash命令 
git stash pop命令恢复之前缓存的工作目录这个指令将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。
git stash apply 将缓存堆栈中的stash多次应用到工作目录中，但并不删除stash拷贝
git stash list 查看现有stash
git stash drop 移除stash，后面可以跟着stash名字
git stash show 查看指定stash的diff，后面可以跟着stash名字
git stash branch testchanges 从stash创建分支
git stash命令提供了参数用于缓存上面两种类型的文件。使用-u或者--include-untracked可以stash untracked文件。使用-a或者--all命令可以stash当前目录下的所有修改。
十二、git fetch
git fetch命令用于从另一个存储库下载对象和引用;远程跟踪分支已更新,需要将这些更新取回到本地；
git fetch origin   从远程refs/heads/命名空间复制所有分支，并将它们存储到本地的refs/remotes/ origin/命名空间中
git fetch origin +pu:pu maint:tmp  此命令(或根据需要创建)通过从远程存储库的分支(分别)pu和maint提取分支来更新本地存储库中的pu和tmp。即使没有快进，pu分支将被更新，因为它的前缀是加号; tmp不会。
git fetch 更新所有分支
git fetch <远程主机名> <分支名> 取回特定分支的更新

十三、git merge 
git merge 用来做分支合并，将其他分支中的内容合并到当前分支中
十四、git rm 
git rm 文件名 简单地从工作目录中手工删除文件
git rm -f 文件名 删除之前修改过并且已经放到暂存区域的文件
git rm --cached 文件名 把文件从暂存区域移除，但仍然希望保留在当前工作目录中
十五、git status
git status -s命令可用于获取哪些文件具有为下一次提交分段的更改的摘要。
十六、git clean
git clean -df  删除当前目录下没有被track过的文件和文件夹
git clean -n  提示哪些文件会删除
git log的常用选项：
选项	说明
--p      按补丁格式显示每个更新之间的差异           --stat   显示每次更新的文件修改统计信息。
--shortstat 只显示 --stat 中最后的行数修改添加移除统计。 --name-only   仅在提交信息后显示已修改的文件清单。
--name-status   显示新增、修改、删除的文件清单。
--abbrev-commit   仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date   使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph   显示 ASCII 图形表示的分支合并历史。
--pretty   使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。

选项	说明
-(n)   仅显示最近的 n 条提交
--since, --after   仅显示指定修改时间后的提交。       --until, --before   仅显示指定修改时间前的提交。
--author   仅显示指定作者相关的提交。            --committer   仅显示指定提交者相关的提交。
--grep   仅显示含指定关键字的提交                -S   仅显示添加或移除了某个关键字的提交

选项	说明
%H	提交对象（commit）的完整哈希字串               %h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串                    %t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串                  %p	父对象的简短哈希字串
%an	作者（author）的名字                            %ae作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）      %ar	修订日期，按多久前的方式显示
%cn	提交者(committer)的名字                         %ce	提交者的电子邮件地址
%cd	提交日期                                       %cr	提交日期,按多久前的方式显示
%s	提交说明

git log --pretty=format:"%an,%ad" master...dddd --since=2018-10-19
git log --pretty=format:"%ad,%an" --since=2018-10-19









Select 语句查询
1、联合查找
select phauser.name, phatest.author,phatest.dateCreate,phatest.commentStatus from phauser inner join phatest where phauser.phid=phatest.author and phatest.commentStatus not in ('Closed','Abandoned') order by phatest.dateCreate;
2、查找某一单
select * from phatest where revisionId='D209865';
3、选择重复的单
select revisionId from phatest where commentStatus not in ('Closed','Abandoned') group by revisionId having count(*)>1);
4、更新revisionId字符串
update phatest set revisionId=(select temp from(select concat('D',revisionId) as temp,id from phatest where commentStatus not in ('Closed','Abandoned')) as temptable where id=phatest.id) where commentStatus not in ('Closed','Abandoned');
5、删除重复的，留下jobNumber最小的那个
delete from user_practice where 名字 in (select 名字 from (select 名字 from user_practice group by 名字 having count(*)>1) as b) and jobNumber not in (select number from (select min(jobNumber) as number from user_practice group by 名字 having count(*)>1) as asd);
6、选择未关闭的单
select revisionId,commentStatus from phatest where commentStatus not in ('Closed','Abandoned') order by dateCreate;
7、更新PHA数据库中的用户
UPDATE phatest_copy set commentUser=(select concat(name,jobNumber) from phauser where phauser.phid=phatest_copy.commentUser);
8、更新EC中的用户所属团队
update ecactivity set team=(select member.team from member where(ecactivity.chg_act_responser_name=concat(name,'(',simple_num,')')));
9、更新PHA中的用户所属团队
update pha set team=(select member.team from member where(pha.author=concat(name,simple_num)));
10、有则更新，没有插入：
ON DUPLICATE KEY UPDATE


Windows错误：
WindowsError：[Error 2] ? ? ? ? ?不存在这个文件
WindowsError：[Error 3] ? ? ? ? ?没有这个路径
WindowsError：[Error 5] ? ? ? ? ?权限问题
WindowsError：[Error 13] ? ? ? ?该文档被其它程序占用，处理不了 ?
WindowsError：[Error 123] ? ? ?路径语法有误
WindowsError：[Error 145] ? ? ?目录非空，多在删除非空目录时出现
--------------------- 

Django
新建项目：
django-admin.py startproject project_name
新建app
python manage.py startapp app_name
或 django-admin.py startapp app_name
使用开发服务器
python manage.py runserver
# 当提示端口被占用的时候，可以用其它端口：
python manage.py runserver 8001
当然也可以kill掉占用端口的进程，具体后面有讲，此处想知道的同学可查下 lsof 命令用法
创建数据库表 或 更改数据库表或字段
# 1. 创建更改的文件
python manage.py makemigrations app_name
# 2. 将生成的py文件应用到数据库
python manage.py migrate
清空数据库
python manage.py flush
导出数据 导入数据
python manage.py dumpdata appname > appname.json
python manage.py loaddata appname.json
Django 项目环境终端
python manage.py shell
数据库命令行
python manage.py dbshell
(数据库Model)反向生成
python manage.py inspectdb

创建对象：
# 方法 1
Author.objects.create(name="WeizhongTu", email="tuweizhong@163.com")
 
# 方法 2
twz = Author(name="WeizhongTu", email="tuweizhong@163.com")
twz.save()
 
# 方法 3
twz = Author()
twz.name="WeizhongTu"
twz.email="tuweizhong@163.com"
twz.save()
# 方法 4，首先尝试获取，不存在就创建，可以防止重复
Author.objects.get_or_create(name="WeizhongTu", email="tuweizhong@163.com")
# 返回值(object, True/False)
查询对象
Person.objects.all() # 查询所有
Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存，不支持负索引，后面有相应解决办法，第7条
Person.objects.get(name="WeizhongTu") # 名称为 WeizhongTu 的一条，多条会报错
 
get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter
Person.objects.filter(name="abc") # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人
Person.objects.filter(name__iexact="abc") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件
 
Person.objects.filter(name__contains="abc") # 名称中包含 "abc"的人
Person.objects.filter(name__icontains="abc") #名称中包含 "abc"，且abc不区分大小写
 
Person.objects.filter(name__regex="^abc") # 正则表达式查询
Person.objects.filter(name__iregex="^abc")# 正则表达式不区分大小写
 
# filter是找出满足条件的，当然也有排除符合某条件的
Person.objects.exclude(name__contains="WZ") # 排除包含 WZ 的Person对象
Person.objects.filter(name__contains="abc").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的

DEBUG＝True时，如果出现 bug 便于我们看见问题所在，但是部署时最好不要让用户看见bug的详情，可能一些不怀好心的人攻击网站，造成不必要的麻烦。

ALLOWED_HOSTS=['*.besttome.com','www.ziqiangxuetang.com']
ALLOWED_HOSTS 允许你设置哪些域名可以访问，即使在 Apache 或 Nginx 等中绑定了，这里不允许的话，也是不能访问的。
当DEBUG=False时，这个为必填项，如果不想输入，可以用ALLOW_HOSTS = ['*']来允许所有的。

STATIC_URL='/static/'
STATIC_ROOT=os.path.join(BASE_DIR,'static')
static 是静态文件所有目录，比如 jquery.js, bootstrap.min.css 等文件。

__file__ 这个变量可以获取到当前文件（包含这个代码的文件）的路径。os.path.dirname(__file__) 得到文件所在目录，再来一个os.path.dirname()就是目录的上一级，BASE_DIR 即为 项目 所在目录
模板：
配置模板文件的路径：TEMPLATES 中的 DIRS 为 [BASE_DIR+"/templates",]
使用Django模板系统的基本规则： 写模板，创建Template对象，创建Context， 调用render()方法。
{% include %} 标签允许在模板中包含其它的模板的内容。
名为mainbody的block标签是可以被继承者们替换掉的部分。
所有的 {% block %} 标签告诉模板引擎，子模板可以重载这些部分。
在url设置中为匹配的请求启了别名后，可以在模板中用%url  ‘name’%来获取具体的链接。这个标签的工作方式是在ap_pname.urls模块的 URL 定义中寻具有指定名字的条目
在应用的urlpatterns前加上app_name=“appname”就可以为url添加好命名空间，这样使用%url  ‘name’%时可以为：”%url  ‘app_name:name’%”
